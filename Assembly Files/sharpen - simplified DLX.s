special-nop                special-nop                special-nop                beqz R0 18             * skip over data section                data1: dc 120         * row 0 col 0                       dc 120         * row 0 col 1                       dc 120         * row 0 col 2                       dc 120         * row 1 col 0                       dc 200         * row 1 col 1 (center)                       dc 120         * row 1 col 2                       dc 120         * row 2 col 0                       dc 120         * row 2 col 1                       dc 120         * row 2 col 2                                       data2: ds 9start:          addi R14 R0 data1     * base address of data1                addi R20 R0 3         * size = 3                addi R21 R0 9         * total pixels = 9                addi R16 R0 0         * i = 0                addi R17 R0 0         * j = 0                addi R10 R0 0         * sum = 0                addi R18 R0 0         * row = 0                addi R22 R18 -1       * row - 1                add R22 R22 R16       * ni = i + (row - 1)                addi R19 R0 0         * col = 0                addi R25 R19 -1       * col - 1                add R25 R25 R17       * nj = j + col - 1                slti R23 R22 0        * if ni < 0 → R23 = 1                beqz R23 2            * if R23 = 0 (ni > 0) skip two lines                 sub R22 R0 R22        * if ni < 0 then ni → -ni                beqz R0 3             * if ni < 0 no need to check ni anymore                sgei R23 R22 3        * if ni greater or equal SIZE = 3 then R23 = 1                beqz R23 1            * if R23 = 0 (ni < SIZE) skip one line                addi R22 R0 1         * if ni greater or equal SIZE = 3 then ni → SIZE - 2 = 1                 slti R23 R25 0        * if nj < 0 -> R23 → 1                 beqz R23 2            * if R23 = 0 (nj > 0) skip two lines                sub R25 R0 R25        * if nj < 0 then nj → -nj                beqz R0 3             * if nj < 0 no need to check nj anymore                sgei R23 R25 3        * if nj greater or equal SIZE = 3 then R23 = 1                beqz R23 1            * if R23 = 0 (nj < SIZE) skip one line                addi R25 R0 1         * if nj greater or equal SIZE = 3 then nj → SIZE - 2 = 1                 add R26 R22 R22       * R26 = ni * 2                add R26 R26 R22       * R26 = ni * 3                add R26 R26 R25       * R26 = ni * 3 + nj                lw R27 R26 data1        * pixel = image[ni][nj]                addi R28 R18 -1       * row offset = row - 1                addi R29 R19 -1       * col offset = col - 1                or R7 R28 R29         * if either offset ≠ 0 - it is not center                bnez R7 5             * if either offset ≠ 0 → skip five lines									    add R3 R27 R0         * pixel to R3                 slli R3 R3            * 2x                slli R3 R3            * 4x                add R3 R3 R27        * 5x				                beqz R0 5             * if center pixel, skip 5 lines								                and R7 R28 R29        * if only one of (row-1, col -1) is zero then R7 = 0                                bnez R7 2                                sub R3 R0 R27         * multiply the pixel by -1 (edge)                                beqz R0 1                addi R3 R0 0                add R10 R10 R3        * add to sum                addi R19 R19 1        * col++                slti R23 R19 3        * if col < 3 then R23 = 1                bnez R23 -38          * loop back to col_loop                addi R18 R18 1        * row++                slti R23 R18 3        * if row < 3 then R23 = 1                bnez R23 -44          * loop back to row_loop                slti R23 R10 0        * if (sum < 0) then R23 = 1                 beqz R23 2            * if (sum > 0) skip clamping                addi R10 R0 0         * clamp to 0 					    beqz R0 3 	        * if operation was clamping to zero, no need to check                  sgti R23 R10 255      * if (sum > 255) then R23 = 1                beqz R23 1            * if (sum < 255) skip clamping                 addi R10 R0 255       * clamp to 255	   add R6 R16 R16         * i * 2                add R6 R6 R16         * i*3                add R6 R6 R17         * i*3 + j                sw R10 R6 data2         * write to image[i][j]                addi R17 R17 1        * j++                slti R23 R17 3        * if j < 3 then R23 = 1                addi R10 R0 0        * reset sum                bnez R23 -60          * loop back to loop_j                 addi R16 R16 1        * i++                slti R23 R16 3        * if i < 3 then R23 = 1                bnez R23 -65          * loop back to loop_i                 halt